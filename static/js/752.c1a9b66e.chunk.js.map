{"version":3,"file":"static/js/752.c1a9b66e.chunk.js","mappings":"qPAEaA,EAAMC,EAAAA,QAAAA,IAAH,uDAKHC,EAAWD,EAAAA,QAAAA,GAAH,0IAQRE,EAASF,EAAAA,QAAAA,IAAH,mE,yICRNG,GALMH,EAAAA,QAAAA,IAAH,2DAKWA,EAAAA,QAAAA,GAAH,gEAKXI,EAAcJ,EAAAA,QAAAA,GAAH,0P,mBCqBxB,EA3BgB,WACd,IAAMK,GAAUC,EAAAA,EAAAA,GAAaC,EAAAA,IAO7B,OACE,8BACGF,GAA8B,IAAnBA,EAAQG,QAClB,SAACL,EAAD,UACGE,EAAQI,KAAI,gBATCC,EASEC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAASC,EAApB,EAAoBA,WAApB,OACX,UAACT,EAAD,YACE,qCAAaO,MACb,wBAZUD,EAYQG,GAXfC,EAAAA,EAAAA,IAAOC,EAAAA,EAAAA,GAASL,GAAM,kBAYzB,uBAAIE,MAHYD,EADP,OASf,SAAC,KAAD,4DAIP,C,wFC5BYL,EAAe,SAACU,GAC3B,OAA0BC,EAAAA,EAAAA,UAAS,MAAnC,eAAOC,EAAP,KAAcC,EAAd,KACQC,GAAOC,EAAAA,EAAAA,MAAPD,GAMR,OAJAE,EAAAA,EAAAA,YAAU,WACRN,EAAKI,GAAIG,KAAKJ,EACf,GAAE,CAACH,EAAMI,IAEHF,CACR,C,mMCVDM,EAAAA,GAAAA,SAAAA,QAAA,gCACA,IACMC,EAAS,CACbC,QAFc,mCAGdC,KAAM,GAGKC,EAAmB,mCAAG,8GAERJ,EAAAA,EAAAA,IAAM,sBAAuB,CAAEC,OAAAA,IAFvB,cAEzBI,EAFyB,yBAGxBA,EAASC,KAAKC,SAHU,gCAK/BC,QAAQC,IAAI,KAAMC,SALa,yDAAH,qDASnBC,EAAY,mCAAG,WAAMC,GAAN,iGAEDZ,EAAAA,EAAAA,IAAM,uBAAD,OAAwBY,GAAQ,CAAEX,OAAAA,IAFtC,cAElBI,EAFkB,yBAGjBA,EAASC,KAAKC,SAHG,gCAKxBC,QAAQC,IAAI,KAAMC,SALM,yDAAH,sDASZG,EAAiB,mCAAG,WAAOjB,GAAP,iGAENI,EAAAA,EAAAA,IAAM,UAAD,OAAWJ,GAAM,CAAEK,OAAAA,IAFlB,cAEvBI,EAFuB,yBAGtBA,EAASC,MAHa,gCAK7BE,QAAQC,IAAI,KAAMC,SALW,yDAAH,sDASjBI,EAAc,mCAAG,WAAOlB,GAAP,iGAEHI,EAAAA,EAAAA,IAAM,UAAD,OAAWJ,EAAX,YAAyB,CAAEK,OAAAA,IAF7B,cAEpBI,EAFoB,yBAGnBA,EAASC,KAAKS,MAHK,gCAK1BP,QAAQC,IAAI,KAAMC,SALQ,yDAAH,sDASd3B,EAAiB,mCAAG,WAAOa,GAAP,iGAENI,EAAAA,EAAAA,IAAM,UAAD,OAAWJ,EAAX,YAAyB,CAAEK,OAAAA,IAF1B,cAEvBI,EAFuB,yBAGtBA,EAASC,KAAKC,SAHQ,gCAK7BC,QAAQC,IAAI,KAAMC,SALW,yDAAH,qD","sources":["components/Cast/Cast.styles.jsx","components/Reviews/Reviews.styles.jsx","components/Reviews/Reviews.jsx","hooks/useFetchById.jsx","service/api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Img = styled.img`\nwidth: 100px;\nheight: 150px;\n`;\n\nexport const CastList = styled.ul`\nwidth: 900px;\nmargin: 60px auto;\n  display: grid;\n  grid-gap: 10px;\n  grid-template-columns: repeat(8, 1fr);\n`;\n\nexport const NoInfo = styled.div`\n  margin-top: 20px;\n  font-style: italic;\n`;","import styled from 'styled-components';\n\nexport const Img = styled.img`\n  width: 100px;\n  height: 150px;\n`;\n\nexport const ReviewsList = styled.ul`\n  width: 900px;\n  margin: 60px auto;\n`;\n\nexport const ReviewsItem = styled.li`\n  padding-left: 10px;\n  padding-right: 10px;\n  border: 1px solid #000;\n  border-radius: 5px;\n  text-align: left;\n  box-shadow: 10px 5px 5px 2px rgba(0, 0, 0, 0.3);\n\n  :not(:last-child) {\n    margin-bottom: 15px;\n  }\n`;\n","import { useFetchById } from 'hooks/useFetchById';\nimport { fetchMovieReviews } from 'service/api';\nimport { parseISO, format } from 'date-fns';\nimport { ReviewsList, ReviewsItem } from './Reviews.styles';\nimport { NoInfo } from 'components/Cast/Cast.styles';\n\nconst Reviews = () => {\n  const reviews = useFetchById(fetchMovieReviews);\n\n  const fixFormatDate = str => {\n    const date = format(parseISO(str), 'dd.MM.yyyy');\n    return date;\n  };\n  \n  return (\n    <>\n      {reviews && reviews.length !== 0 ? (\n        <ReviewsList>\n          {reviews.map(({ author, content, created_at }) => (\n            <ReviewsItem key={author}>\n              <h3>Author: {author}</h3>\n              <p>{fixFormatDate(created_at)}</p>\n              <p>{content}</p>\n            </ReviewsItem>\n          ))}\n        </ReviewsList>\n      ) : (\n        <NoInfo>~ We don't hane any reviews for this movie ~</NoInfo>\n      )}\n    </>\n  );\n};\n\nexport default Reviews;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nexport const useFetchById = (func) => {\n  const [movie, setMovie] = useState(null);\n  const { id } = useParams();\n\n  useEffect(() => {\n    func(id).then(setMovie);\n  }, [func, id]);\n\n  return movie;\n};\n\n","import axios from 'axios';\n\naxios.defaults.baseURL = `https://api.themoviedb.org/3/`;\nconst API_KEY = '0214e4f6556edfc65f2eadfc23b43510';\nconst params = {\n  api_key: API_KEY,\n  page: 1,\n};\n\nexport const fetchTrendingMovies = async () => {\n  try {\n    const responce = await axios('/trending/movie/day', { params });\n    return responce.data.results;\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\nexport const searchMovies = async name => {\n  try {\n    const responce = await axios(`/search/movie?query=${name}`, { params });\n    return responce.data.results;\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\nexport const fetchMovieDetails = async (id) => {\n  try {\n    const responce = await axios(`/movie/${id}`, { params });\n    return responce.data;\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\nexport const fetchMovieCast = async (id) => {\n  try {\n    const responce = await axios(`/movie/${id}/credits`, { params });\n    return responce.data.cast;\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\nexport const fetchMovieReviews = async (id) => {\n  try {\n    const responce = await axios(`/movie/${id}/reviews`, { params });\n    return responce.data.results;\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n"],"names":["Img","styled","CastList","NoInfo","ReviewsList","ReviewsItem","reviews","useFetchById","fetchMovieReviews","length","map","str","author","content","created_at","format","parseISO","func","useState","movie","setMovie","id","useParams","useEffect","then","axios","params","api_key","page","fetchTrendingMovies","responce","data","results","console","log","message","searchMovies","name","fetchMovieDetails","fetchMovieCast","cast"],"sourceRoot":""}